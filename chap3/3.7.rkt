#lang racket
(define (contains-password input password-list)
  (cond ((null? password-list) #f)
        ((eq? input (car password-list)) #t)
        (else (contains-password input (cdr password-list)))))

(define (make-account balance password)
  (define password-list (list password))
  (define (add-password new-password)
    (set! password-list (append password-list (list new-password))))
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds!"))
  (define (deposit amount)
    (begin (set! balance (+ balance amount))
           balance))
  (define (notify-incorrect-password amount)
    "Incorrect password")
  (define (dispatch p m)
    (if (contains-password p password-list)
        (cond ((eq? m 'add-account) add-password)
              ((eq? m 'withdraw) withdraw)
              ((eq? m 'deposit) deposit)
              (else (error "Unknown request -- MAKE-ACCOUNT" m)))
        notify-incorrect-password))
  dispatch)

(define (make-joint account old-pass joint-pass)
  ((account old-pass 'add-account) joint-pass))

(define acc (make-account 100 'abc123))
;acc
;(acc 'abc123 'deposit)

((acc 'abc123 'deposit) 50)
((acc 'abc123 'deposit) 75)
((acc 'abc123 'withdraw) 750)
((acc 'secret-password 'withdraw) 40)
(make-joint acc 'abc123 '123abc)
((acc '123abc 'withdraw) 35)
((acc '123abc 'deposit) 350)