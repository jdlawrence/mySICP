#lang sicp
(define (make-table) 
  (let ((local-table (list '*table* nil))) 
  
    (define (assoc key records) 
      (cond ((null? records) false) 
            ((equal? records '(())) false) 
            ((equal? key (car (car records))) (car records)) 
            (else (assoc key (cdr records))))) 
    (define (find subtable keys) 
      (let ((record (assoc (car keys) (cdr (cdr subtable))))) 
        (if record 
            (if (null? (cdr keys)) 
                (list nil record) 
                (find record (cdr keys))) 
            (list keys subtable)))) 
    (define (new-branch! table keys value) 
      (define (recurse keys value) 
        (if (null? (cdr keys)) 
            (cons (car keys) (list value)) 
            (cons (car keys) (list nil (recurse (cdr keys) value))))) 
      (if (not (pair? keys)) 
          #f 
          (set-cdr! (cdr table) (cons (recurse keys value) (cdr (cdr table)))))) 
  
    (define (insert! keys value) 
      (let ((find-result (find local-table keys))) 
        (let ((subkeys (car find-result)) 
              (subtable (car (cdr find-result)))) 
          (if (null? subkeys) 
              (set-car! (cdr subtable) value) 
              (new-branch! subtable subkeys value)))) 
      'ok)        
    (define (lookup keys) 
      (let ((find-result (find local-table keys))) 
        (let ((subkeys (car find-result)) 
              (subtable (car (cdr find-result)))) 
          (if (null? subkeys) 
              (let ((value (car (cdr subtable)))) 
                (if (equal? value nil) 
                    #f 
                    value)) 
              #f)))) 
  
    (define (dispatch m) 
      (cond ((eq? m 'lookup) lookup) 
            ((eq? m 'insert!) insert!) 
            (else (error "Unknown operation -- MAKE-TABLE" m)))) 
    dispatch)) 
  
(define t (make-table)) 
(define (table-insert! value . keys) 
  ((t 'insert!) keys value)) 
(define (table-delete! . keys) 
  ((t 'insert!) keys nil)) 
(define (table-lookup . keys) 
  ((t 'lookup) keys)) 
(define (table-draw) 
  (t 'draw))

(table-insert! 5 'a 'b 'c)
(table-lookup 'a 'b 'c)
(table-lookup (list 'a 'b 'c))
(table-insert! 8 'a 'b 'c)
(table-lookup 'a 'b 'c)